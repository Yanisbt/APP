import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd

class GestionVentesApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Gestion des Ventes - ESMEMarket")
        
        self.fichier = None
        self.df = None
        
        # Bouton pour charger le fichier CSV
        self.btn_charger = tk.Button(root, text="Charger Fichier CSV", command=self.charger_fichier)
        self.btn_charger.pack(pady=5)
        
        # Zone d'affichage des résultats
        self.resultat = tk.Text(root, height=10, width=80)
        self.resultat.pack(pady=5)
        
        # Entrée et bouton pour filtrer par date
        tk.Label(root, text="Filtrer par date (YYYY-MM-DD) :").pack()
        self.entree_date = tk.Entry(root)
        self.entree_date.pack()
        self.btn_filtrer_date = tk.Button(root, text="Filtrer", command=self.filtrer_par_date)
        self.btn_filtrer_date.pack(pady=5)
        
        # Entrée et bouton pour filtrer par produit
        tk.Label(root, text="Filtrer par produit :").pack()
        self.entree_produit = tk.Entry(root)
        self.entree_produit.pack()
        self.btn_filtrer_produit = tk.Button(root, text="Filtrer", command=self.filtrer_par_produit)
        self.btn_filtrer_produit.pack(pady=5)
        
        # Bouton pour calculer le chiffre d'affaires total
        self.btn_calculer_ca = tk.Button(root, text="Calculer Chiffre d'Affaires Total", command=self.calculer_ca_total)
        self.btn_calculer_ca.pack(pady=5)
    
    def charger_fichier(self):
        self.fichier = filedialog.askopenfilename(filetypes=[("Fichiers CSV", "*.csv")])
        if self.fichier:
            self.df = pd.read_csv(self.fichier, sep=",", quotechar='"', engine="python", on_bad_lines='skip')
            self.df['Order Date'] = pd.to_datetime(self.df['Order Date'], errors='coerce')
            self.resultat.insert(tk.END, "Fichier chargé avec succès !\n")
    
    def filtrer_par_date(self):
        if self.df is None:
            messagebox.showerror("Erreur", "Veuillez charger un fichier CSV d'abord.")
            return
        date = self.entree_date.get()
        date = pd.to_datetime(date, errors='coerce')
        df_filtre = self.df[self.df['Order Date'].dt.date == date.date()]
        self.afficher_resultats(df_filtre)
    
    def filtrer_par_produit(self):
        if self.df is None:
            messagebox.showerror("Erreur", "Veuillez charger un fichier CSV d'abord.")
            return
        produit = self.entree_produit.get().strip().lower()
        df_filtre = self.df[self.df['Product'].str.strip().str.lower() == produit]
        self.afficher_resultats(df_filtre)
    
    def calculer_ca_total(self):
        if self.df is None:
            messagebox.showerror("Erreur", "Veuillez charger un fichier CSV d'abord.")
            return
        self.df['Quantity Ordered'] = pd.to_numeric(self.df['Quantity Ordered'], errors='coerce')
        self.df['Price Each'] = pd.to_numeric(self.df['Price Each'], errors='coerce')
        ca_total = (self.df['Quantity Ordered'] * self.df['Price Each']).sum()
        self.resultat.insert(tk.END, f"Chiffre d'affaires total : {ca_total:.2f}\n")
    
    def afficher_resultats(self, df):
        self.resultat.delete(1.0, tk.END)
        if df.empty:
            self.resultat.insert(tk.END, "Aucune donnée trouvée.\n")
        else:
            self.resultat.insert(tk.END, df.to_string(index=False))

if __name__ == "__main__":
    root = tk.Tk()
    app = GestionVentesApp(root)
    root.mainloop()
